import React from "react";
/**
 * Definition of a SearchPanelChoice
 */
export interface SearchPanelChoice {
    /**
     * Key for a choice can be any unique string.
     * For link variant, recommend using a url.
     */
    key: string;
    /**
     * The description that will be displayed in search results.
     */
    description: string;
}
export declare enum SearchPanelVariant {
    /**
     * A multi-select variant where result items have checkboxes.
     */
    checkbox = 0,
    /**
     * A variant where result items are anchor links.
     */
    link = 1,
    /**
     * A single-select variant where result items have radio buttons.
     */
    radio = 2
}
/**
 * Definition of props for SearchPanel.
 */
interface SearchPanelProps {
    /**
     * Display Chips to represent selected choices.
     */
    chips?: boolean;
    /**
     * An array of choices to be displayed.
     */
    choices: Array<SearchPanelChoice>;
    /**
     * Optional class name to be applied to the top level of the component.
     */
    className?: string;
    /**
     * A label for clear button, should be provided if onClear is provided.
     */
    clearLabel?: string;
    /**
     * Result list will float above content. Setting width is required.
     */
    float?: boolean;
    /**
     * Indicate when consumer is loading to display a spinner.
     */
    isLoading?: boolean;
    /**
     * Optional maximum height of result list in pixels: <SearchPanel maximumHeight={250} />
     */
    maximumHeight?: number;
    /**
     * Provide a "None" choice item so user can "unselect" a select choice
     * when variant={SearchPanelVariant.checkbox} or variant={SearchPanelVariant.radio}
     */
    noChoiceItem?: SearchPanelChoice;
    /**
     * Function that will handle event when search input changes.
     */
    onChange: (event: React.ChangeEvent) => void;
    /**
     * Function that will handle event when user presses clear button.
     */
    onClear?: (event: React.MouseEvent) => void;
    /**
     * Function that will handle event when search input is focused.
     */
    onFocus?: (event: React.FocusEvent) => void;
    /**
     * Function that will handle event when selected items change.
     */
    onSelectionChange: (selectedChoices: Array<SearchPanelChoice>) => void;
    /**
     * State of selected choices.
     */
    preSelectedChoices?: Array<SearchPanelChoice>;
    /**
     * Display a shadow on hover and when expanded.
     */
    shadow?: boolean;
    /**
     * A smaller variant.
     */
    small?: boolean;
    /**
     * Placeholder label in the search input box.
     */
    placeholder: string;
    /**
     * Value of search input.
     */
    value: string;
    /**
     * Variants available: checkbox, radio, link (can be used as links by consumer)
     */
    variant?: SearchPanelVariant;
    /**
     * Width in pixels.
     */
    width?: number;
}
/**
 * SearchPanel component
 * @param props
 */
export declare const SearchPanel: (props: SearchPanelProps) => JSX.Element;
export {};
